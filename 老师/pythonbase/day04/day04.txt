day03回顾
字符串
  在程序中存储文字信息(存储的是文字的编码)

字面值表示方式:
  ''  ""   ''''''   """"""
  'hello'  "ABC"  '''123'''  """456"""
  ' 和 "  的区别

  '''和 """  

转义字符:
  \'   \"   \\   \n    \r   \t   ...
  \140  \x41  \u0041  \U00000041
  
英文字符编码:
  $ man ascii


raw 字符串
   r'\a\b\c\d\e\f'

字符串运算:
  +   +=    *    *= 
    'ABC' + r'123'  # 'ABC123'
    'ABC' * 2       # 'ABCABC'
  >   >=   <  <=  ==  != 
    'ABC' < 'ACB'  # True
  in ,   not in
     'A'  in 'ABC'    #  True
  索引[]  切片[:], [::]
  s = "ABCDE"
  print(s[3])
  s[1:4]

函数:
  len(x)  # 求长度
  max(x)  # 求最大值字符
  min(x)

  ord(c)  # 求一个字符的编码值
  chr(i)  # 用编码值求字符

  bin(x)  转为二进制
  oct(x)     八进制
  hex(x)     十六进制

  str(x)    #转为字符串

字符串的方法:
  s = "ABCD"
  s.isalpha()
  s.count('A')
  s.find(sub[, start[,end]])
  s.replace(old, new, count)

  >>> help(str)  # 查看字符串str类内的全部方法 




day04笔记:
字符串格式化表达式
  作用:
    生成具有一定格式的字符串
  语法格式:
    格式字符串 % 参数值
    格式字符串 % (参数值1, 参数值2, ...)
  说明:
    % 左侧为格式化字符串,其中%开头的为占位符,占位符的位置
      将用参数值替换
    % 右侧为参数值,当有多个参数值时用括号() 括起来
  示例:
    fmt = '姓名: %s, 年龄: %d'
    s = fmt % ('Tarena', 17)
    print(s)  # 姓名: Tarena, 年龄: 17'

格式化字符串中的占位符的类型码
  占位符和类型码     意义 
    %s         字符串,使用str(x)函数转换
    %r         字符串,使用repr(x) 函数转换
    %c         整数转为单个字符
    %d         转为十进制整数
    %o         转为八进制整数
    %x         转为十六进制整数(字符a-f小写)
    %X         转为十六进制整数(字符A-F大写)
    %e         指数型浮点数(e小写), 如2.9e+10
    %E         指数型浮点数(E大写), 如2.9E+10
    %f,%F      浮点十进制形式
    %g,%G      十进制形式浮点或指数浮点自动转换
    %%         等同于一个%字符

占位符 % 和类型码之间的格式化语法:
  % [- + 0 宽度.精度] 类型码

  说明:
    -     左对齐(默认是右对齐)
    +     显示正号
    0     左侧空白位置补零
    宽度: 整个数据输出的宽度
    精度: 保留小数点后多少位(默认6位)
  示例:
    "%10d" % 123    # '       123'
    "%-10d" % 123   # '123       '
    "%10s" % "ABC"  # '       ABC'
    "%-5s" % "ABC"  # 'ABC  '
    "%05d" % 123    # '00123'
    '%+10d' % 123   # '      +123'

练习:
  输入三行文字,让这三行文字依次以20个字符的宽度右对齐
  打印在终端上
  如:
    请输入第1行: hello china
    请输入第2行: abcd
    请输入第3行: a
  输出结果为:
        hello china
               abcd
                  a
  做完上题后再思考:
    能否以最长字符串的长度进行右对齐显示(左侧填充空格)




循环语句:
  python循环语句有两种:
    while 语句
    for 语句

  问题:
    输入一个整数n,写程序打印如下:
       这是第1行
       这是第2行
       ....
       这是第n行
    解决:
      i = 1
      print("这是第%d行" % i)
      i += 1
      print("这是第%d行" % i)
      i += 1
      print("这是第%d行" % i)
      i += 1

while语句:
  作用:
    根据一定条件,重复的执行一条语句或多条语句
  语法:
    while 真值表达式:
        语句块1(*此部分语句可能会重复执行多次)
    else:
        语句块2
  说明:
    else子句部分的语句可以省略
    else子句仅在真值表达式为False时执行

  示例见:
    while.py
    while2.py

练习:
  1. 打印1~20的整数

  2. 打印1~20的整数,打印在一行内显示,每个数字之间用一个空
     格分隔
     提示:  print(x, end=' ') 可以实现

  3. 打印1~20的整数,每行打印5个,打印四行,如:
     1 2 3 4 5
     6 7 8 9 10
     ...
     提示: 可以将if语句嵌入到while语句中
    
  4. 用while语句打印 10 ~ 1之间的整数
     10
     9
     8
     ...
     2
     1



  5. 写程序,先计算:
      1 + 2 + 3 + 4 + ...... + 99 + 100 的和
    然后打印结果(用循环来实现)


while语句注意事项
  1. 要控制循环真值表达式的值来防止死循环
  2. 通常用真值表达式内的循环变量来控制循环的条件
  3. 通常在循环的语句块内改变循环变量来控制循环次数和变量的走向


while语句的嵌套:
  while 语句本身是语句,和其它语句一样,可以嵌套到任何的
    复合语句中
  示意:
    while 真值表达式:
        ...
        while 真值表达式2:
            ...
        else:
            ...
        ...
    else:
        ...
  示例见:
    while_embed.py
    

练习:
  输入一个整数,打印指定宽度的正方形:
    如:
      输入: 5
    打印如下正方形
      1 2 3 4 5
      1 2 3 4 5
      1 2 3 4 5
      1 2 3 4 5
      1 2 3 4 5
    如:
      输入: 3
    打印如下正方形
      1 2 3
      1 2 3
      1 2 3



break 语句:
  问题:
    如果在循环中不想在继承执行此循环语句,怎么办?
  作用:
    用于循环语句(while语句或for语句)中,用来终止当前循环语句
    的执行
  语法:
    break
  说明:
    当break语句执行后,此循环语句break语句之后的语句将不再执行
    break 语句通常和if语句组成使用
    break 语句终止循环时,循环语句的else子句的语句将不会被执行
    break 语句只能终止当前循环语句的执行,如果有循环嵌套时,不
          会跳出嵌套的外重循环
    break 语句只能在循环语句(while或for语句)内部使用
  示例见:
    break.py
  
死循环:
  死循环是指循环条件一直成立的循环
  死循环通常用break语句来终止循环
  死循环的else子句永远不会执行

示例见:
  death_loop.py


练习:
  任意输入一些整数,当输入负数时结束输入
  当入完毕后,打印出您输入的全部正整数的和
  如:
    请输入: 1
    请输入: 2
    请输入: 3
    请输入: 4
    请输入: -1
  打印:
    您刚才输入的这些数的和是: 10



练习:
  输入一个正整数n,代表一个宽度和高度都为n个字符的长方形
  如:
    请输入: 4
  打印:
    ####
    #  #
    #  #
    ####
  如:
    请输入: 6
  打印:
    ######
    #    #
    #    #
    #    #
    #    #
    ######


练习:
  1. 写一个程序,输入一个开始的整数用变量begin绑定
    输入一个结束的整数,用变量 end 绑定
    打印从begin开始 到 end 结束(不包含end)的每个整数,打印在
      一行内
    如:
      请输入开始值: 8
      请输入结束值: 15
    打印:
      8 9 10 11 12 13 14
  附加思考:  如何实现每5个数字打印在一行内,打印多行
    提示:  可以多加一个变量,用来记录打印的个数

  2. 写一个程序,输入一段字符串,判断这个字符串中有几个英文字母
    (英文字母是指a-z A-Z的英文)

  3. 用while语句实现打印三角形,输入一个整数,表求三角形的宽度和高度
    打印出相应的直角三角形
    如:
      请输入三角形的宽度: 4
      1) 打印如下:
        *
        **
        ***
        ****
      2) 打印如下:
           *
          **
         ***
        ****
      3) 打印如下三角形:
        ****
        ***
        **
        *
      4) 打印如下三角形:
        ****
         ***
          **
           *















