day15回顾
  生成器
    动态创建数据的对象

    生成器有两种:
      生成器函数
         def myyield():
             yield 1
             yield 3
             yield 8
             yield 10

      生成器表达式
        (x**2 for x in range(10))

    迭代相关的函数:
      zip(iter1, iter2, iter3, .....)
      enumerate(iterable, start=0)   # (start, 数据)

  字节串和字节数组
    字节(8bit) [0~255]
    字节串的创建方式:
      b''   b'ABCD'     # b'中文'
    字节串的构造函数
       bytes()   bytes(20), bytes(range(65, 70))
       bytes('中文', 'utf-8')
    字节数组的构造函数
       同字节串的构造函数
  字节串和字节数组的运算:
    +  +=  * *=
    < <=  > >= == !=
    in, not in 
    索引和切片
  字节串和字符串的转换
    字符串的encode可以将字符串转为字节串
    字节串的decode 可以将字节串转换为字符串


day16 笔记:
文件 File
  什么是文件
    文件是用来数据存储的单位
    文件通常用来长期存储数据
    文件中的数据是以字节为单位进行顺序存储的
文件的操作流程
  1. 打开文件
  2. 读/写文件
  3. 关闭文件
说明:
  任何操作系统,一个应用程序同时打开文件的数量有最大数限制

文件的打开函数:
  open(filename, mode='rt')  用于打开一个文件,成功返回
                    文件流对象,失败则会触发OSError异常通知
文件关闭的方法:
  F.close()  关闭文件,释放系统资源

文件的读操作方法:
  F.readline()  读取一行数据,如果达到文件尾,则返中空字符串
  F.readlines() 返回每行字符串的列表
  F.read(size=-1)  从一个文件流中最多读取size个字符(文本
                文件)或字节(二进制文件),如果不给出参数,则
                默认读取文件中全部的内容并返回
  示例见:
    file_open.py

练习:
  自己写一个文件'info.txt' 内部存一些文字信息
    张三,20,100
    李四,21,96
    小王,19,98
  写程序将这些数据读取出来,并以如下格式打印在屏幕终端上:
    张三 今年 20 岁,成绩是: 100
    李四 今年 21 岁,成绩是: 96
    小王 今年 19 岁,成绩是: 98

文本文件的写方法:
  F.write(text) 写一个字符串或字节串到文件流中,返回写入的
              字符数(文本文件)或字节数(二进制文件)
  F.writelines(lines)  将一个字符串的列表写入到文件中

文件的模式字符的含义
  文档参见:
    python_base_docs_html/文件.html
  示例见:
    file_write.py
     
练习:
  写一个程序,输入联系人的电话号码和姓名,
    把这些姓名和电话号码记录在文件中存储,
    如:
      请输入姓名: 张三
      请输入电话: 13888888888
      请输入姓名: 李四
      请输入电话: 13999999999
      请输入姓名: <直接回车结束输入>
    格式为:
      张三 1388888888
      李四 1399999999
    
文本文件的迭代读取
    文件流对象是可迭代对象,迭代过程将以换行符'\n' 作为分隔符
      依次获取
  示例:
    f = open('myfile.txt')
    for line in f:
        print(line)



标准输入输出文件:
  sys.stdin  标准输入文件(默认为键盘),终端下 ctrl + d 可
            以输入文件结束符
  sys.stdout 标准输出文件(默认为屏幕终端)
  sys.stderr 标准错误输出文件(默认为屏幕终端)
  模块名: sys

  说明:
    每一个python程序启动后都会有以上三个已经打开的文件供我们
    使用,这三个文件在不用时不需要手动关闭
  示例见:
    stdout.py

  示例:
    myf = open("abc.txt",'w')
    print(1, 2, 3, 4, sep='#', file=myf)
    myf.close()




文本文件操作:
  在文本文件模式下,读写文件需要用字符串进行操作
  默认文件中存储的都是字符数据,在读写中会自动进行编解码操作

二进制文件操作:
  二进制文件模式字符: 'b'
  默认文件中存储的都是以字节(byte)为单位的数据,通常有人为规
    定的格式
  对二进制文件的读写需要用字节串(bytes)或字节数组进行操作
  如果文件中存储的是文字信息,需要手动进行编解码操作

二进制文件的读方法:
  f.read()
二进制文件的写方法:
  f.write(x)  # 返回写入的字节数
示例见:
  binary_file_read.py
  binary_file_write.py




文件的随机访问:
  F.tell()  返回当前文件的读写位置(从文件头以字节为单位的整数)
  F.seek(偏移量, 相对位置)  设置文件的读写位置
    偏移量:
      大于0的数代表向文件末尾方向移动
      小于0代表t向文件头方向移动
    相对位置:
      0 代表从文件头开始偏移
      1 代表从当前读写位置开始偏移
      2 代表从文件尾开始偏移
    



文件小结:
  两种IO操作:
    读read
    写write
  两种操作模式:
    文件方式:'t'
    二进制方式: 'b'
  文件打开模块:
    r 读
    w 写, x 写(不创建新文件), a 追加写

汉字编码
  问题:
    十个汉字占多少个字节?
  答:
    UTF-8编码 一个汉字占3个字节
    GB18030 编码,一个汉字点2个或4个字节
    GB2312 或 GBK 占3个字节

  国标系列
    GB18030(二字节或四字节编码,共27533个汉字)    
      GBK(二字节编码, 共21003个汉字 )
        GB2312(二字节编码, 共6763个汉字+682个全角字符)
    (Windows下常用)
  国际标准:
    UNICODE <----> UTF-8
    (Linux/Mac OS X/ IOS / Android等常用)

  UTF-8 (8-bit Unicode Transformation Format)
     0x0000 ~ 0x007F   一个字节(ASCII)
     0x0080 ~ 0x07FF   二个字节
     0x0800 ~ 0xFFFF   三字节表示(中文落在此区)
  python编码字符串
    'gb2312'
    'gbk'
    'gb18030'
    'utf-8'
    'ascii'
    ...

编码注释:
  在python源文件的第一行或第二行写入如下内容:
    # -*- coding:gbk -*-
    # 设置源文件的编码格式为: gbk
    
    # -*- coding:utf-8 -*-
    # 设置源文件的编码格式为: utf-8(python3默认)

  示例见:
    hello_gbk.py



练习:
  1. 写程序,实现复制文件的功能
    要求:
      1. 要考虑关闭文件的问题
      2. 要考虑超大文件的问题
      3. 要能复制二进制文件

  2. 修改原学生信息管理程序,添加两个功能:
    | 9) 从文件中读取数据(si.txt) |
    | 10) 保存信息到文件(si.txt)  |





















