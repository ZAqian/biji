day11 回顾
  函数式编程
    可重入函数:
      输入一定.结果必然一定(在函数内部不访问除局部变量以外的
      任何变量)
    高阶函数:
      1. 函数返回一个函数
      2. 函数可以接收函数作为参数传入
      三个内建的高阶函数
        map, filter, sorted
        示例:
          求: 1 + 4 + 9 + 16 + .... + 81
          sum(map(lambda x:x**2, range(1, 10)))
          求: 1 + 3 + 5 + 7 + 9 + ... + 99
          sum(filter(lambda x: x%2, range(100)))
          sorted(可迭代对象, key=获取依据的函数, 
                 reverse=False)

递归函数 recursion function

闭包: closure
  内嵌函数引用了外部嵌套函数的变量,这个内嵌函数就是闭包

  闭包的特点:
    闭包使用的外部嵌套函数的变量会延迟销毁
  全局变量和局部变量

    def make_power(y):
        def fn(x):
            return x ** y
        return fn

    pow2 = make_power(2)
    print(pow2(5))
    print(pow2(6))

    pow3 = make_power(3)
    pow4 = make_power(4)
    pow100 = make_power(100)


day12 笔记
装饰器 decorators(专业提高篇)
  装饰器是一个函数,主要作用是用来包装另一个函数或类(后面才讲)

  作用:
    在不修改被装饰函数的源代码,不改变被装饰函数的调用方式的情况
    下添加或改变原函数的功能
  语法:
    def 装饰器函数名(fn):
        语句块
        return 函数对象
    
    @装饰器函数名<换行>
    def 被装饰函数名(形参列表):
        语句块
  示例见:
    mydeco1.py
    mydeco2.py
    mydeco3.py
  


函数的文档字符串
  函数内第一次没有赋值给任何变量的字符串是此函数的文档字符串
  语法:
    def 函数名(参数列表):
        '函数文档字符串'
        语句块
  示例:
    def myfunc(x, y):
        '''这是myfunc的文档字符串
           参数x 代表xxx
           参数y 代表yyy
        '''
        pass
  说明:
    文档字符串通常用来说明本函数的功能和使用方法
    在交互环境下输入: help(函数名) 可以查看函数的文档字符串
    函数的文档字符串绑定在函数的__doc__属性上

函数的__doc__ 属性 
  __doc__属性用于绑定函数的文档字符串
  如:
    print(myfunc.__doc__)

函数定义语句(def 语句)的完整语法
[@装饰器名1]
[@装饰器名2]
[...]
def 函数名([位置形参], [*元组形参], [命名关键字形参],
         [**字典形参]):
    '文档字符串'
    语句块

注: [] 代表其中的内容可省略

面试题:
    L = [1, 2, 3]
    def f(n=0, lst=[]):  # 缺省参数[] 在def语句执行时创建该列表
                        # 并此列表一直被f函数绑定
        lst.append(n)
        print(lst)

    f(4, L)  # [1, 2, 3, 4]
    f(5, L)  # [1, 2, 3, 4, 5]
    f(100)  # [100]
    f(200)  # [200]
  解决方法 :
    def f(n=0, lst=None):
        if lst is None:  # 说明没有传第二个实参
            lst = []  # 创建一个空列表,然后再绑定
        lst.append(n)
        print(lst)


模块 Module
  什么是模块
    模块是一个包含有一系列数据,函数,类等组成的程序组
    模块是一个文件,模块文件名通常以.py结尾
  作用:
    1. 让一些相关的数据,函数,类等有逻辑的组织在一起,使逻辑结
       构更加清晰
    2. 模块中的数据,函数和类等可提供给其它函数或程序使用

  模块的分类
    1. 内置模块, 在解析器内部可以直接使用.
    2. 标准库模块,安装python时已安装且可直接使用
    3. 第三方模块(通常为开源), 需要自己安装
       安装方法:
          $ sudo pip3 install 模块名
          $ sudo pip3 install tensorflow
    4. 用户自己编写的模块(可以作为其它人的第三方模块)

模块的导入
  import 语句
    语法:
     import 模块名1 [as 模块新名1], 模块名2 [as 模块新名2],...
    作用:
      将某模块整体导入到当前模块中
    用法:
      模块名.属性名
    示例:
      import math
      import sys, time
      print(math.factorial(5))  # 120
相关函数:
  dir(obj)  返回模块所有属性的列表
  help(obj)  查看模块相关的文档字符串

练习:
    公式:
      周长=2*pi*r(半径)
      面积=pi * r ** 2
    1. 输入一个圆的半径,打印出这个圆的面积
    2. 输入一个圆的面积,打印出这个圆的半径
      (要求用math模块内的函数和数据)

from import 语句
  语法:
    from 模块名 import 模块属性名1 [as 属性新名1], 模块属
          性名2 [as 属性新名2], ...
  作用:
    将某模块内的一个或多个属性导入到当前模块的作用域
  示例:
    from math import factorial as fac
    from math import sin
    from math import pi
    print(fac(5))
    print(sin(pi/2))
  

from import *语句
  语法:
    from 模块名 import *
  作用:
    将某模块的所有属性导入到当前模块
  示例:
    from math import *
    sin(pi/2)
    factorial(6)


dir 函数:
  格式:
    dir([对象])  返回一个字符串列表
  作用:
    如果没有参数,则返回这个对象的所有变量的列表
    如果给定一个对象作为参数,则返回这个对象的所有变量的列表
      对于一个模块,返回这个模块的全部变量 
      对于一个类对象,返回类对象的所有变量,并递归基类对象的所
         有变量
      对于其它对象,返回所有变量,类变量和基类变量
    

内建模块的使用:
数学模块
  模块名 math
    文档参见:
      python_base_docs_html/数学模块math.html
    
时间模块
  模块名: time
    文档参见:
      python_base_docs_html/时间模块time.html
    
    示例:
      t = (2008, 8, 8, 20, 8, 8, 0, 0, 0)
      time.mktime(t)  # 1218197288.0
    示例见:
      sleep.py

练习:
  写一个程序,输入你的出生年月日,
    1) 算出你已经出生多少天?
    2) 算出你出生那天是星期几?




练习:
  1. 写一个程序,以电子时钟的格式打印时间
      格式为:
        HH:MM:SS
  2. 编写一个闹钟程序,启动时设定时间,到时间后打印一句语:
      时间到,然后退出程序
  3. 编写函数fun(n) 返回下列多项式的和
     Sn = 1 + 1/1! + 1/2! + 1/3! + ... + 1/n!
     求n 为10时,Sn的值

















