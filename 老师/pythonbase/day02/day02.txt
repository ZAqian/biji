day01回顾:
  python 诞生:
    1989年, Guido Van Rossum
  应用领域
  优缺点
  两个版本:
    V2
    V3

  python3 (CPython, C语言写的)
  执行方式:
    1) 
       $ python3 xxx.py
    2)
       编辑,xxx.py 的第一行 #! /usr/bin/python3
       $ chmod +x xxx.py
       $ ./xxx.py
  交互模式:
    $ python3
    >>>  a = 100
  
  基础数据类型
    数字:
      整数 int
         100   0x64  0o144  0b1100100
      浮点数 float
        3.14   0.314e1
      复数 complex
        1j   2+1j
      布尔型数 bool
        True   False

  None 空值
    
表达式和运算符:
  算术运算符:
    + - * /  //  %  ** 
  赋合赋值算术运算符
    +=  -=  *=  /=  //=  %=  **=
  
变量
  关联一个对象的标识符

标识符的命名规则:  [A-Za-z_][A-Za-z0-9_]*
  标识符不能是关键字:
    True, False, None, is, not, del, if....

赋值语句:
  语法:
    变量名 = 表达式
    变量名1 = 变量名2 = 表达式
    变量名1, 变量名2, 变量名3 = 表达式1, 表达式2, 表达式3

del 语句
  用来删除变量, 解释此变量的绑定关系

用引用计数方式进行自动化的内存管理
  refrence count

is 和 is not 运算符
  判断id 是否相同






day02 笔记:
比较运算符:
  <   小于
  <=  小于等于
  >   大于
  >=  大于等于
  ==  等于
  !=  不等于

  语法:
    左表达式 < 右表达式
  说明:
    比较运算符返回布尔类型 的值
  示例:
    100 < 200   # 返回True
    100 >= 200  # 返回False
    1 + 5 == 2 + 4  # True
  比较运算符的数学表示
    0 <= 100 <= 200

数值对象的构造(创建)函数
  int(x, base=10), int(x=0)  用数字或字符串转换为整数,如果
                不给出参数则返回0
  float(obj)      用字符串或数字转换为浮点数,如果不给出参数
                则返回0.0
  complex(r=0.0, i=0.0)  用数字创建一个复数(实部为r,
                虚部为i)
  bool(x)        用x获取一个布尔值(True/False)

函数调用
  函数名(传参列表)
  
  说明:
      函数调用是一个表达式,一定会返回一个对象的引用关系(或者
      返回None)

  示例:
    x = int(3.14)   # 将3.14转换为整数
    x = int()       # 等同于 x = 0
    x = int("123")  # x绑定 123 这个数字
    x = int("123", 16)  # 将字符串"123"转为16进制的整数

bool(x) 返回假值的情况:
    bool(x)  用于显式获取x的布尔值

  值          说明
 None         空值
 False        布尔假值
 0, 0.0, 0j   所有的数字零
 -----以下内容后面会讲--------------
 ''  空字符串
 ()  空元组
 []  空列表
 {}  空字典
 set() 空集合
 ...


练习:
  将数字 3.14 用变量 pi 绑定
  将 pi 变量转为整数,用变量 i 绑定
  将 pi 变量与 i 变量相减,结果用变量 f 绑定
  1. 判断 f 是否等于0.14
  2. 删除所有的变量
    (用交互模式来做)



预置内建的数值型函数
 abs(x)     取x的绝对值
 round(number[, ndigits]) 对数值进行取近似值(四舍五入),
             ndigits 是小数向右取整的位数,负数表示向左取整
 pow(x, y, z=None)  相当于 x**y 或 x**y%z

help() 函数查看帮助
  help(函数名)
  如:
    >>> help(abs)  


语句 statements
  语句是由一些表达式组成的,通常一条语句可以独立执行来完成一部分
    事情并形成结果.
  一条语句建议写在一行内,多条语句写在一行内需要用分号(;)分隔

  示例:
    x = 100 + 200
    print("x=", x)
    写在一起为:
    x = 100 + 200; print("x=", x)

显示换行
  折行符 \ (读作反斜杠)
  折行符必须放在一行的末尾来示意解释执行器,下一行也是本行的语句
  示例见:
    newline1.py

隐式换行
  所有的括号的内容换行,称为隐式换行
  括号:
    ()  []   {}
  示例见:
      newline2.py
    



基本输入输出函数:
基本输入函数 input
  作用:
    从标准输入设备上读取一个字符串
    末尾的换行字符会被删除
  格式:
    input("提示字符串")
    返回值:
       用户输入的字符串
    说明:
      '提示字符串'可以为空
  示例见:
    myinput.py

基本输出函数 print
  格式:
    print(value, ..., sep=' ', end='\n', flush=False)
  作用:
    将一系列数值以字符串形式输出到标准输出设备上,默认为终端
  关键字参数:
    sep  两个值之间的分隔符,默认为一个空格' '
    end  输出完毕后在字符流末尾自动追加一个字符串,默认为换
         行符'\n'
    flush   是否立即输出到终端上(默认不立即输出)

  示例见:
    myprint.py

练习:
  1. 输入两个整数,分别用变量x, y来绑定
    1) 计算这两个数的和
    2) 计算这两个数的积
  2. 今天是小明3岁生日,假设每年有365 天,计算它出生了
     多少个星期余多少天?

if 语句
  问题:
    有两件语句:
      print("是偶数")
      print("是奇数")
    如何只让其中一条语句执行?
  作用:
    让程序根据条件选择性的执行某条语句或某些语句
  语法:
    if 真值表达式1:
        语句块1
    elif  真值表达式2:
        语句块2
    elif 真值表达式3:
        语句块3
    ...
    else:
        语句块4
  说明:
    elif 子句可以有0个,1个或多个
    else 子句可以有0个或1个,且只能放在if语句的最后

练习:
  任意输入一个整数,分三步做如下事情:
    1) 判断这个数是否大于100
    2) 判断这个数是否小于0
    3) 判断这个数是否在50~150之间
  

  if示例见:
    if.py
    if2.py

练习:
  1. 输入一年中的季度1~4,输出这个季度有哪儿个月,如果用户输入
    的不是1~4的整数,则提示用户:"您输错了"

  2. 输入一年中的月份(1~12) 输出这个月在哪儿个季度,如果输入
    的是其它的数,则提示您输错了
  

if语句的真值表达式:
  if 100:
      print("真值")
  # 等同于
  if bool(100):
      print("真值")


if 语句嵌套
  if 语句本身是由多条子句组成的一条复合语句
  if 语句可以作为语句嵌套到另一个复合语句的内部
  示例见:
    if_embed.py



条件表达式
  语法:
    表达式1 if 真值表达式 else 表达式2
  作用:
    根据真值表达式的取值(True/False) 来决定执行表达式1或表达
    式2并返回结果
  示例见:
    if_express.py

练习:
  1. 写一个程序,输入一个数,用if语句计算这个数的绝对值并打印出来
  2. 写一个程序,输入一个数,用条件表达式计算这个数的绝对值
     并打印出来
     (要求: 不允许使用abs(x) 函数)

pass 语句
  作用:
    通常用来填充语法空白
  语法:
    pass
  示例见:
    pass.py


布尔运算
  运算符:
    not     and      or

布尔非运算 not
  语法:
    not x
    注: x 代表表达式
  作用:
    对x进行布尔取非,如bool(x) 为True,则返回False, 否
    则返回True
  示例:
    not True            # 返回False
    not False           # 返回True
    not 0 <= 60 <= 100  # 返回False


布尔与操作 and
  语法:
    x and y
    注: x,y代表表达式
  作用:
    优先返回假值对象
    当x的布尔值为False时,返回x,否则返回y

  示例:
    True and True    # True
    True and False   # False
    False and True   # False
    False and False  # False
    0 and 100        # 0
    100 and 0.0      # 0.0

布尔或操作 or
  语法:
    x or y
  作用:
    优先返回真值对象
    当x为True时,返回x,否则返回y
  示例:
    True or True    # True
    True or False   # True
    False or True   # True
    False or False  # False
    3.14 or 100     # 3.14
    3.14 or 0       # 3.14
    0.0 or 100      # 100
    0.0 or 0        # 0


正负号运算符:
  运算符:
    +(正号)
    -(负号)
  语法:
    + 表达式
    - 表达式
  说明:
    一元运算符
  示例:
    a = 5
    b = -a
    c = +a
    print(a, b, c)



练习:
  1. 北京出租车计价器:
    收费标准:
      3公里以内收费13元
      基本单价 2.3元/公里(超出3公里以外)
      空驶费: 超过15公里后,每公里加收单价的50%空驶
            费(3.45元/公里)
    要求:
      输入公里数,打印出费用的金额(以元为单位,精确到分,分以后
      四舍五入)
  2. 写一个程序,输入三个数,打印出三个数中的最大数
     (思考:如果是四个数,五个数打印出最大数该如何做?)
  3. 给出一个年份判断是否是闰年并打印结果
     规则: 每四年一闰,每百年不闰,四百年又闰
     如:
        2016年闰年, 2100年非闰年, 2400年 闰年
  4 BMI指数(Body Mass Index)  又称 身体质量指数
     BMI公式:   BMI = 体重(公斤) / 身高的平方(米)
     如: 一个69公斤的人,身高是173公分
         BMI = 69 / 1.73 ** 2 = 23.05
    标准表:
      BMI < 18.5         体重过轻
      18.5 <= BMI <= 24  正常范围
      BMI > 24           体重过重
    输入身高和体重,打印BMI的值,并打印体重状况

