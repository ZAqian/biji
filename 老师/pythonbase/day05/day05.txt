day04 回顾:
  字符串的格式化表达式
    字符串 % 参数
    字符串 % (参数1, 参数2, ...)
    占位符和类型码:
      %s   %d   %f  
      %r   %e,%E   %g,%G   %x,%X, 
      %% 
    占位符和类型码之间
      - + 0 宽度.精度  
      %-20d    %-+020d    

  循环:
    while 语句
      语法:
          while 真值表达式:
              语句块1
          else:
              语句块2
      while语句的嵌套
          
    break 语句
       作用:
          终止当前循环
    死循环
      

day05笔记:
  循环语句:
    while语句
    for语句

for 语句
  作用:
    用来遍历可迭代对象的数据元素
    (可迭代对象是指能依次获取数据元素的对象)
  可迭代对象包括:
    字符串str
    -----以下后面会讲-----
    列表 list
    元组 tuple
    字典 dict
    集合 set
    ...

  语法:
    for 变量列表 in 可迭代对象: 
        语句块1
    else:
        语句块2
  说明:
    else 子句部分可以省略(同while语句类似)
    当在循环内用break语句终止for循环语句时,else子句部分语句
      不会执行
    内部语句的缩进同while语句类似
  示例见:
    for.py
  
练习:
  1. 任意输入一段字符串
    1) 计算出这段字符串中空格的个数,并打印这个数
    2) 计算出字符串的全部ascii字符的个数并打印
        注:  ascii 字符的编码在0~127范围内
    思考:
      用while语句能实现上述功能?

练习:
  输入一个字符串,从尾向头输出这个字符串的字符
  如:
    请输入: ABC中文
  打印:
    文
    中
    C
    B
    A





range函数:
  作用:
    用来创建一个生成一系列整数的可迭代对象(也叫整数序列生成器)
  格式:
    range(stop)   用来生成0~stop 区间内的整数,直到stop
            为止(不包含stop)
    range(start, stop[, step])  用来生成start~stop区间
            内的整数,直到stop为止,每个整数间隔step(不包
            含stop,且step可以是负整数)
  参见:
    >>> help(range)
  说明:
    此整数序列生成器生成从start开始,到stop结束(不包含),以
        step为步长的整数
    range函数调用返回的对象是可迭代对象
  示例:
    range(4)        # 生成 0 1 2 3
    range(3, 6)     # 生成 3 4 5
    range(1, 10, 2) # 生成 1 3 5 7 9
    range(5, 0, -2) # 生成 5 3 1
    range(4, 0)     # 空(不能得到任何整数)
  示例见:
    range.py

练习:
  1. 用for语句打印 1~20的整数,打印在一行内
    1 2 3 4 5 6 .... 19 20

  2. 求100以内有哪儿些整数 与 自身+1的乘积再对11求余等的结果
     等于8
        x * (x + 1) % 11 == 8
    
for 语句的注意事项:
for语句中range的调用是先调用一次,之后不再调用
  示例见:
    for_range.py

for 语句内的变量可能不被创建的问题
  for x in range(4, 0):
      print(x)
  else:
      print("x绑定", x)  # 报错
  print(x)  # x这个变量不存在


for 语句的嵌套:
  示例:
    for x in "ABC":
        for y in '123':
            print(x + y)  # ???
    
练习:
  输入一个正整数,代表正方形的宽度和高度,打印正方形:
    如:
      输入: 5
    打印:
      1 2 3 4 5
      1 2 3 4 5
      1 2 3 4 5
      1 2 3 4 5
      1 2 3 4 5




continue 语句
  问题:
    如何让程序不再向下执行,重新开始一次新的循环
  作用:
    用于循环语句(while,for语句)中,不再执行本次循环continue
    之后的语句,重新开始一次新的循环
  语法:
    continue
  说明:
    continue语句只能用在循环体内部
    在while语句中执行continue语句,将会直接跳转到while语句
       的真值表达式处,重新判断循环条件
    在for语句中,执行continue语句,将会从可迭代对象中取下一
       个元素,绑定变量后再次进行循环
  示例见:
    continue.py
    continue2.py
    continue3.py

练习:
  求 1 ~ 100 之间所有不能被 2, 3, 5, 7 中任意一个数整
  除的数的和(用continue实现)



循环总结:
  语句:
    while 语句
    for 语句
  循环相关的语句:
    break 语句     终止循环
    continue 语句  再次开始一次新的循环

可迭代对象:
  字符串
  range()函数返回的对象



练习:
  1. 计算:
    1 + 3 + 5 + 7 + ...... + 99 的和
    分别用 for 语句和while语句两种方式来做

  2. 写程序生成如下字符串:
    1)  'ABCDE........XYZ'

    2)  'AaBbCcDdEe.....XxYyZz'
      (提示: 可以使用 ord 和 chr 函数实现)

  3. 输入一个整数代表正方形的宽度和高度,打印如下正方形
    如:
      输入: 5
    打印:
      1 2 3 4 5
      2 3 4 5 6
      3 4 5 6 7
      4 5 6 7 8
      5 6 7 8 9

    如:
      输入: 3
    打印:
      1 2 3
      2 3 4
      3 4 5





练习:
  1. 输入一个整数,代表一棵圣诞节的树干高度
    打印一棵圣诞树
    如:
      输入: 2
    打印
     *
    ***
     *
     *
    如:
      输入: 3
    打印:
      *
     ***
    *****
      *
      *
      *

  2. 写一个程序,任意输入一个整数,判断是否是素数(prime)
    素数(也叫质数),是只能被1和自身整除的正整数
      如:  2   3   5    7    11   13   17   19 ...
    提示:
      可以用排除法: 当判断x是否为素数时,只要让x分别除以 
        2,3,4,5,6,...,x-1, 只要有一次整除了,则x不是素数
      否则x是素数

  3. 算出 100 ~ 999以内的水仙花数(Narcissistic number)
    水仙花数是指百位数的3次方 加上 十位数的3次方 加 个位数的
    3次方等于原数的整数
      如:  153 等于 1**3 + 5**3 + 3**3 ,则153是水仙花数
    





