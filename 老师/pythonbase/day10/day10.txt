函数的参数:
  实参(给函数数据)
    传递方式:
      位置传参   fx(1, 2, 3)
        序列传参  fx(*"ABC")
      关键字传参 fx(a=1, b=2, c=3)
        字典关键字传参  fx(**{'a': 1, 'b': 2, 'c': 3})
  形参(函数接收调用者传递的数据)
    缺省参数  def fx(a, b, c=10, d=20):  ...
    函数形参的四种定义方式:
      1. 位置形参
      2. 星号元组形参 (*args)
      3. 命名关键字形参
      4. 双星号字典形参 (**kwargs)
      def fx(a, *args, b, c, **kwargs):
          pass
    示例:
      def fx(a, *args, b, **kwargs):
            print(a)
            print(args)
            print(b)
            print(kwargs)


全局变量和局部变量
  全局变量会一直存在直到用 del 语句删除才会销毁
  局部变量,在函数调用时才会创建,在函数调用结束会自动销毁

  在函数内部使用变量时,优先查找局部变量,当不存在局部变量时,才
  会找全局变量

变量和对象之间的关系
L = [100]
def fa(x):
    L.append(x)  # 先用L找到列表,追加列表,L的绑定关系不变
def fb(y):
    L.append(y)
def fc(z):
    L = [z]  # 创建局部变量L,绑定新列表,之后L毁销,全局的L不变
def fd(zz):
    L += [zz]   # L = L + [zz]  # 出错,同一个L不能即是全局
                # 变量又是局部变量

fa(1)  # L = [100, 1]
fb(2)  # L = [100, 1, 2]
fc(3)  # L = [100, 1, 2]
fd(4)  # 报错

globals() 和  locals()



day10笔记:

函数变量
  函数名是变量,它在创建函数时绑定一个函数

示例:
  def f1():
      print('f1函数被调用')
  f2 = f1  # <-- 这里没有用括号调用,f2变量和f1变量同时绑定
           # 同一个函数
  f2()  # f1函数被调用
  f1()  # f1函数被调用
示例2:
  def f1():
      print('f1')

  def f2():
      print('f2')

  f1, f2 = f2, f1  # 交换变量的绑定关系

  f1()  # f2
  f2()  # f1


一个函数可以作为另一个函数的实参传递
  示例见:
    function_as_args.py

看懂下列代码在做什么事?
    def myinput(fn):
        L = [1, 5, 3, 9, 7]
        r = fn(L)
        return r

    print(myinput(max))  # ???
    print(myinput(min))  # ???
    print(myinput(sum))  # ???

函数可以作为另一个函数的返回值
  示例见:
    return_function.py
  
练习:
  写一个公式计算器的解释执行器
  已知有如下一些函数:
    def myadd(x, y):
        return x + y
    def mysub(x, y):
        return x - y
    def mymul(x, y):
        return x * y
  再自己写一个函数
    def get_func(s):
        ... # 此处自己实现
    此函数传入一个字符串"加" 或 "+" 则返回myadd函数
    此函数传入一个字符串"乘" 或 "*" 则返回mymul函数
  在程序主函数中的程序如下:
    def main():
        while True:
            s = input("请输入计算公式:")  # 10 加 20
            L = s.split()  # L = ['10', '加', '20']
            a = int(L[0])
            b = int(L[2])
            fn = get_func(L[1])
            print("结果是:", fn(a, b))  # 结果是: 30
    main()


函数的嵌套定义
  函数嵌套定义是指一个函数里调用def语句来创建其它函数的情况

  示例见:
    function_embed_def.py


python 的作用域
  作用域也叫名字空间,是访问变量时查找变量名的范围空间

pyhton 中的四个作用域 LEGB
   作用域               英文解释            英文简写
 局部作用域          local(function)           L
 外部嵌套函数作用域  enclosing function local   E
 函数定义所在模块的作用域 global(module)         G
 python 内置模块的作用域  builtin(python)       B

示例见:
  namespace.py

变量名的查找规则
  在访问变量时,先查找本地变量,然后是包裹此函数外部的函数内部的
  变量,之后是全局变量,最后是内置变量
    即:  L --> E --> G --> B
  在默认的情况下,变量名赋值会创建或者改变本地作用域的变量

问题:
a = 1
L = [1]
def fn(a, L):
    a += 2
    L += [2]

fn(a, L)
print(a, L)  # 1, [1, 2]




global 语句
  作用:
    告诉解释器,global语句声明的一个或多个变量,这些变量的作用
    域为模块级的作用域,也称作全局作用域
  说明:
    global 全局声明将赋值变量映射到模块文件内部的作用域
  语法:
    global 变量1, 变量2, ...
  示例:
    global a, b, c
    global d
  示例见:
    global.py

  global 说明:
    1. 全局变量如果要在函数内部被赋值,则必须经过全局声明(否则
       会被认为是局部变量)
    2. 全局变量在函数内部不经过声明就可以直接访问(取值,但
       不能通过赋值改变绑定关系)
    3. 不能先声明局部变量,再用global声明为全局变量,此做法不
       附合规则
    4. global变量列表里的变量名不能出现在函数的形参列表里.
  

nonlocal 语句
  作用:
    告诉解释器,nonlocal声明的变量不是局部变量,也不是全局变量
    而是外部嵌套函数内部的变量
  语法:
    nonlocal 变量名1, 变量名2, ...
  示例见:
    nonlocal.py

  说明:
    1. nonlocal 语句只能在被嵌套函数的内部进行使用
    2. 对 nonlocal 变量进行赋值将对外部嵌套函数作用域内的
      变量进行操作
    3. 当有两层或两层以上函数嵌套时,访问nonlocal变量只对最
       近一层的变量进行操作
    4. nonlocal语句的变量列表里的变量名,不能出现在形参列表里
    



def 语句的作用是:
   创建函数,然后用函数名绑定这个语句块

lambda 表达式(又称匿名函数)
  作用:
    创建一个匿名函数对象
    同def 类似,但不提供函数名
  语法格式:
    lambda [函数的形参列表]: 表达式
    注: [] 代表里面的内容可省略
  示例见:
    lambda.py
  说明:
    1. lambda 表达式创建的函数只能包含一条表达式
    2. lambda 比函数简单且可以随时创建和销毁,有利于减少程序的
       偶合度

练习:
  1. 写一个lambda 表达式
    fx = lambda n: ...
      此表达式创建的函数判断n这个数的2次方+1能否被5整除,如果
      能整除返回True,否则返回False
    print(fx(3))  # True
    print(fx(4))  # False

  2. 写一个lambda 表达式来创建函数,此函数返回两个形参的最大值
    如:
      def mymax(x, y):
          ...
    改写后
      mymax = lambda .....
    测试代码:
      print(mymax(100, 200))  # 200

# 看懂下面的程序在做什么
def fx(f, x, y):
    print(f(x, y))

fx((lambda a, b: a + b), 100, 200)
fx((lambda a, b: a ** b), 3, 4)



练习:
  1. 写一个函数mysum(x) 来计算
    1 + 2 + 3 + 4 + .... + x 的和
    要求: 不允许调用sum函数
    如:
       print(mysum(100))  # 5050
  2. 写一个函数myfac(n) 来计算n! (n的阶乘)
     n! = 1*2*3*4*....*n
    如:
      print(myfac(5))  # 120
  3. 写一个函数myfun(n) 计算:
     1 + 2**2 + 3**3 + ... + n**n的和
    如:
      print(myfun(3))  # 32
  4. 写程序打印杨辉三解(只打印6层)
        1
       1 1
      1 2 1
     1 3 3 1
    1 4 6 4 1
  1 5 10 10 5 1

  5. 实现带界面的<<学生信息管理程序>>
    操作界面如下:
      +-------------------------+
      | 1) 添加学生信息           |
      | 2) 显示学生信息           |
      | 3) 删除学生信息           |
      | 4) 修改学生成绩           |
      | q) 退出                  |
      +-------------------------+
      请选择: 1<回车>
    要求: 每个功能写一个函数与之相对应


