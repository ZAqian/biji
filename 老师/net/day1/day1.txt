吕泽
  lvze@tedu.cn

课程内容
1. 网络编程
2. 进程线程
3. 正则表达式
4. MongoDB数据库
5. git & github
6. 项目基础


一. 网络编程
  
  1. 网络功能： 数据的传输

  2. OSI七层模型 ： 网络通信工作标准化流程

    应用层 ：提供用户服务，具体功能由应用程序体现 
    表示层 ：数据的压缩优化加密
    会话层 : 建立用户连接，选择适当的传输层服务
    传输层 ：提供传输服务，流量控制
    网络层 ：路由选择，网络互连
    链路层 ：进行数据交换，具体数据的发送处理
    物理层 ：提供数据传输硬件，网卡接口，传输介质 

    优点： 1. 建立了统一的工作流程模式
    	   2. 分工明确，各司其职
	   3. 有利于提高模块内聚性，降低耦合，方便开发

cookie：
  高内聚 ： 模块功能尽可能单一，不相互掺杂
  低耦合 ： 模块之间尽量减少关联影响


   3. TCP/IP模型（四层模型）

      背景 ： 实际开发中工程师无法完全按照七层模型要求操作，逐渐演化为更符合实际的四层模型。

      应用层 ： 集中了应用，表示，会话三层功能
      传输层
      网络层
      物理链路层 ：物理链路层依托更丰富的硬件设备

   4. 网络传输过程
     【1】发送端由应用层发送消息，注册添加首部信息，最终到物理层发送。
     【2】发送的消息经多个节点（交换机，路由器）传输，每个节点解析物理信息和网络信息，添加新的网络物理信息，最终到达目标主机。
     【3】目标主机接收信息，从物理层逐层解析，最终在应用层呈现

   5. 网络协议
      
      定义：在网络传输中，都遵循的规定，包括建立什么样的数据结构，什么样的特殊标志等。
   
   6. 网络概念

     【1】 网络主机 （host）

         功能： 标识一台主机在网络中的位置（地址）

	 本地地址 ：'localhost'
	             '127.0.0.1'
	
	 网络地址 ：'172.40.91.197'

	 自动获取网卡地址：'0.0.0.0'

	 查看网络地址信息 ： ifconfig
     
     【2】 IP地址
     	 
	 功能：确定一台主机的网路路由位置

	 结构：IPv4  点分十进制 172.40.91.197 每部分取值0--255

	       IPv6  128位 扩大了地址范围
	 
	 特殊IP ： 127.0.0.1 本机测试IP
	 	   0.0.0.0  自动获取本机可用IP
		   172.40.91.0  标识一个网段
		   172.40.91.1  标识网关
		   172.40.91.255  广播地址
      
     【3】 端口（port）
        
	 作用：端口是网络地址的一部分，用于区分主机上不同的网络应用程序。

	 特点：一个系统中的应用监听端口不重复

	 取值范围：1--65535
	           
		   1--1023  系统网络应用或者大众程序使用端口
		   1024--65535  自用端口

     【4】 域名

         定义： 给网络服务器地址起的名称

	 作用： 方便记忆，表达一定的含义

	 联通测试 ： ping  [ip]

二. 传输层服务

  面向连接的传输服务 （基于TCP协议的数据传输）

    1. 传输特征：提供了可靠地数据传输，可靠性指数据传输过程中无丢失，无失序，无差错，无重复。

    2. 保证手段 ： 在通信前建立数据连接，通信结束要正常断开

      【1】 三次握手（建立连接）
	  1. 客户端向服务器发送消息报文请求连接
	  2. 服务器接收到请求后，回复报文确定可以连接
	  3. 客户端收到回复，发送最终报文建立连接
      
      【2】 四次挥手（断开连接）
	  1. 主动方发送报文请求断开
	  2. 被动方接收到请求，立即回复报文，并开始准备断开
	  3. 被动方准备就绪后再次发送报文告知可以断开
	  4. 主动方最终发送确认报文，断开连接

     3. 适用情况：对数据传输准确性要求较高，数据传输文件较大的情况。比如：网页获取，文件下载，邮件收发


  面向无连接的传输服务 （基于UDP协议的数据传输）

     1. 传输特点：不保证传输的可靠性，传输过程无需连接断开，数据收发随意自由

     2. 适用情况：对传输数据准确性没有绝对要求，网络情况较差，需要传输效率高，或者无法建立连接模型。比如：网络视频，群聊，广播。
  

面试要求：1.  OSI七层模型了解么，tcp/ip模型呢？
	  2.  tcp服务和udp服务有什么区别
	  3.  三次握手和四次挥手指什么，能说说过程么


三. socket套接字编程

  1. 套接字：实现网络编程进行数据传说的技术手段

  2. python实现套接字方法 ： import socket

  3. 套接字分类

     流式套接字(SOCK_STREAM)：以字节流方式传输数据，实现tcp网络传输方案。

     数据报套接字(SOCK_DGRAM):以数据报形式传输数据，实现udp网络传输方案。

     * 面向连接 -- tcp协议 --可靠传输 -- 流式套接字
     * 无连接 -- udp协议 -- 不可靠传输 -- 数据报套接字


三. TCP套接字编程

  1. 服务端流程

    【1】 创建套接字

     sockfd = socket.socket(socket_family=AF_INET,
			    socket_type=SOCK_STREAM,
			    proto = 0)
     功能：创建套接字对象
     参数：socket_family  地址族类型 AF_INET表示IPv4地址
     	   socket_type    套接字类型 SOCK_STREAM 流式套接字
	   			     SOCK_DGRAM 数据报套接字
	   proto  通常为0  表示子协议的选择
     返回 ： 套接字对象

    【2】 绑定网络地址
     
     sockfd.bind(addr)
     功能：绑定本机的网络地址
     参数：地址元组  （ip,port）

    【3】 设置监听

     sockfd.listen(n)
     功能: 设置监听套接字，确定监听队列
     参数：监听队列大小

    【4】 等待处理客户端连接

     connfd,addr = sockfd.accept()
     功能：阻塞等待处理客户端请求
     返回值： connfd  客户端连接套接字
     	      addr  连接的客户端地址

     * 阻塞函数：程序运行过程中遇到阻塞函数则暂停执行，直到达成某种条件后继续运行。

    【5】 收发消息

     data = connfd.recv(buffersize)
     功能：接收tcp消息
     参数：每次最多接收消息的大小
     返回值：返回接收到的内容

     n = connfd.send(data)
     功能：发送tcp消息
     参数：要发送的数据 bytes格式
     返回值：发送了多少字节数据

     * str --> bytes  string.encode()
     * bytes --> str    bytes.decode()

    【6】 关闭套接字

     sockfd.close()
     功能：关闭套接字

  2. 客户端流程
    
    【1】 创建套接字
       
       * 只有相同类型的套接字才能实现通信
     
    【2】 请求连接
       
       sockfd.connect(server_addr)
       功能：发起连接请求
       参数：地址元组 服务器地址

    【3】 收发消息
      
       * 防止两端recv阻塞，recv/send要配合
     
    【4】 关闭套接字

作业 ： 
  1.  将tcp代码改为 客户端退出后可以继续接受下一个客户端连接

  2.  总结面试要求问题

  3.  复习文件操作 





     
     







